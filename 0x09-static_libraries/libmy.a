!<arch>
3-islower.c/    0           0     0     644     197       `
#include "main.h"

/**
* _islower - checks for lowercase character
* @x: the character to check
* Return: 1 if x is lowercase, 0 otherwise
*/
int _islower(int x)
{
return (x >= 'a' && x <= 'z');
}

6-abs.c/        0           0     0     644     196       `
#include "main.h"
/**
* _abs - computes the absolute value of an integer
* @n: the int to check
* Return: the absolute value of int
*/
int _abs(int n)
{
if (n >= 0)
{
return (n);
}
return (-n);
}
_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
0-memset.c/     0           0     0     644     335       `
#include "main.h"

/**
  * _memset - Fill memory with a constant byte
  * @s: memory area to fill
  * @b: constant byte to fill
  * @n: bytes of memory area to fill
  *
  * Return: the memory area filled
  */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		s[a] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     424       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strcat - Write a function that concatenates two strings
 * @src: source string
 * @dest: destination string
 * Return: dest with src appended
 */
char *_strcat(char *dest, char *src)
{
	int dlen = 0, i;

	while (dest[dlen] != '\0')
	{
		dlen++;
	}

	for (i = 0; src[i] != 0; i++)
	{
		dest[dlen] = src[i];
		dlen++;
	}

	dest[dlen] = '\0';
	return (dest);
}
100-atoi.c/     0           0     0     644     430       `
#include "main.h"
/**
* _atoi - Convert a string to an integer.
* @s: The pointer to convert
* Return: A integer
*/
int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}

		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}

		if (isi == 1)
		{
			break;
		}

		c++;
	}

	ni *= min;
	return (ni);
}
1-isdigit.c/    0           0     0     644     240       `
#include "main.h"

/**
 * _isdigit - Write a function that checks for a digit (0 through 9)
 * @c: input
 * Return: 1 if c is a digit, otherwise 0
 */

int _isdigit(int c)
{

	if ((c >= 48) && (c <= 57))
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     335       `
#include "main.h"

/**
  * _memcpy - copy memory area
  * @dest: dest memory area
  * @src: source memory area
  * @n: bytes from memory area to copy
  *
  * Return: memory area replaced
  */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0; a < n; a++)
	{
		dest[a] = src[a];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     457       `
#include "main.h"
#include <stdio.h>
#include <string.h>

/**
 * _strncat - Write a function that concatenates two strings
 * @src: source string
 * @dest: destination string
 * @n: limit
 * Return: dest with src appended
 */
char *_strncat(char *dest, char *src, int n)
{

	int dlen = 0, i;

	while (dest[dlen] != '\0')
	{
		dlen++;
	}
	for (i = 0; i < n && src[i]; i++)
	{
		dest[dlen] = src[i];
		dlen++;
	}
	dest[dlen + n + 1] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     344       `
#include "main.h"

/**
  * _strchr - locate character in string
  * @s: source string
  * @c: character to find
  *
  * Return: the string from character found
  */
char *_strchr(char *s, char c)
{
	int a = 0, b;

	while (s[a])
	{
		a++;
	}

	for (b = 0; b <= a; b++)
	{
		if (c == s[b])
		{
			s += b;
			return (s);
		}
	}

	return ('\0');
}
2-strlen.c/     0           0     0     644     242       `
#include "main.h"
/**
 * _strlen - Write a function that returns the length of a string
 * @s: input
 * Return: count of string length
 */
int _strlen(char *s)
{
	int count = 0;

	while (*s != '\0')
	{
		count++;
		s++;
	}
	return (count);
}
2-strncpy.c/    0           0     0     644     377       `
#include "main.h"
#include <stdio.h>
/**
 * _strncpy - Write a function that copies a string.
 * @src: source string
 * @dest: destination
 * @n: limit to copy
 * Return: copied string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}

3-puts.c/       0           0     0     644     250       `
#include "main.h"
/**
 * _puts - Write a function that prints a string, followed by a new line
 * @str: prints to standard output
 * Return: string
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     519       `
#include "main.h"
#include <stdio.h>
/**
* _strcmp - Write a function that compares two strings
* @s1: string to compare
* @s2: second string to compare
* Return: difference in integer
*/
int _strcmp(char *s1, char *s2)
{
	int a = 0, b = 0, c = 0, r = 0, lim;

	while (s1[a])
	{
		a++;
	}

	while (s2[b])
	{
		b++;
	}

	if (a <= b)
	{
		lim = a;
	}
	else
	{
		lim = b;
	}

	while (c <= lim)
	{
		if (s1[c] == s2[c])
		{
			c++;
			continue;
		}
		else
		{
			r = s1[c] - s2[c];
			break;
		}

		c++;
	}

	return (r);
}

3-strspn.c/     0           0     0     644     399       `
#include "main.h"
/**
  * _strspn - search a string for a set of bytes
  * @s: source string
  * @accept: accepted string
  *
  * Return: number of bytes in the init segment
  */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int a = 0, b, t = 0;

	while (accept[a])
	{
		b = 0;

		while (s[b] != 32)
		{
			if (accept[a] == s[b])
			{
				t++;
			}

			b++;
		}

		a++;
	}

	return (t);
}

4-isalpha.c/    0           0     0     644     229       `
#include "main.h"
/**
* _isalpha - checks for alphabetic character
* @c: the character to be checked
* Return: 1 if c is a letter, 0 otherwise
*/
int _isalpha(int c)
{
return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     422       `
#include "main.h"

/**
  * _strpbrk - search a string for any of a set of bytes
  * @s: source string
  * @accept: accepted characters
  *
  * Return: the string since the first found accepted character
  */
char *_strpbrk(char *s, char *accept)
{
	int a = 0, b;

	while (s[a])
	{
		b = 0;

		while (accept[b])
		{
			if (s[a] == accept[b])
			{
				s += a;
				return (s);
			}

			b++;
		}

		a++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     431       `
#include "main.h"

/**
  * _strstr - locate a substring
  * @haystack: the string to search
  * @needle: the string to find
  *
  * Return: char value
  */
char *_strstr(char *haystack, char *needle)
{
	int a = 0, b = 0;

	while (haystack[a])
	{
		while (needle[b])
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}

			b++;
		}

		if (needle[b] == '\0')
		{
			return (haystack + a);
		}

		a++;
	}

	return ('\0');
}

9-strcpy.c/     0           0     0     644     276       `
#include "main.h"
/**
* _strcpy - Copy a string
* @dest: Destination value
* @src: Source value
* Return: the pointer to dest
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}
0-isupper.c/    0           0     0     644     243       `
#include "main.h"

/**
 * _isupper - Write a function that checks for uppercase character
 * @c: input
 * Return: 1 if 'c' is uppercase otherwise 0
 */
int _isupper(int c)
{

	if ((c >= 'A')  && (c <= 'Z'))
		return (1);
	else
		return (0);
}

